/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Office as PrismaOffice,
  ServiceAgent as PrismaServiceAgent,
  User as PrismaUser,
} from "@prisma/client";

export class OfficeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OfficeCountArgs, "select">): Promise<number> {
    return this.prisma.office.count(args);
  }

  async offices(args: Prisma.OfficeFindManyArgs): Promise<PrismaOffice[]> {
    return this.prisma.office.findMany(args);
  }
  async office(
    args: Prisma.OfficeFindUniqueArgs
  ): Promise<PrismaOffice | null> {
    return this.prisma.office.findUnique(args);
  }
  async createOffice(args: Prisma.OfficeCreateArgs): Promise<PrismaOffice> {
    return this.prisma.office.create(args);
  }
  async updateOffice(args: Prisma.OfficeUpdateArgs): Promise<PrismaOffice> {
    return this.prisma.office.update(args);
  }
  async deleteOffice(args: Prisma.OfficeDeleteArgs): Promise<PrismaOffice> {
    return this.prisma.office.delete(args);
  }

  async findServiceAgents(
    parentId: string,
    args: Prisma.ServiceAgentFindManyArgs
  ): Promise<PrismaServiceAgent[]> {
    return this.prisma.office
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .serviceAgents(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.office
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
