/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OfficeService } from "../office.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OfficeCreateInput } from "./OfficeCreateInput";
import { Office } from "./Office";
import { OfficeFindManyArgs } from "./OfficeFindManyArgs";
import { OfficeWhereUniqueInput } from "./OfficeWhereUniqueInput";
import { OfficeUpdateInput } from "./OfficeUpdateInput";
import { ServiceAgentFindManyArgs } from "../../serviceAgent/base/ServiceAgentFindManyArgs";
import { ServiceAgent } from "../../serviceAgent/base/ServiceAgent";
import { ServiceAgentWhereUniqueInput } from "../../serviceAgent/base/ServiceAgentWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OfficeControllerBase {
  constructor(
    protected readonly service: OfficeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Office })
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOffice(@common.Body() data: OfficeCreateInput): Promise<Office> {
    return await this.service.createOffice({
      data: data,
      select: {
        createdAt: true,
        id: true,
        officeName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Office] })
  @ApiNestedQuery(OfficeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async offices(@common.Req() request: Request): Promise<Office[]> {
    const args = plainToClass(OfficeFindManyArgs, request.query);
    return this.service.offices({
      ...args,
      select: {
        createdAt: true,
        id: true,
        officeName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async office(
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Office | null> {
    const result = await this.service.office({
      where: params,
      select: {
        createdAt: true,
        id: true,
        officeName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOffice(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() data: OfficeUpdateInput
  ): Promise<Office | null> {
    try {
      return await this.service.updateOffice({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          officeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOffice(
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Office | null> {
    try {
      return await this.service.deleteOffice({
        where: params,
        select: {
          createdAt: true,
          id: true,
          officeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/serviceAgents")
  @ApiNestedQuery(ServiceAgentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "read",
    possession: "any",
  })
  async findServiceAgents(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<ServiceAgent[]> {
    const query = plainToClass(ServiceAgentFindManyArgs, request.query);
    const results = await this.service.findServiceAgents(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        serviceType: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/serviceAgents")
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  async connectServiceAgents(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ServiceAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceAgents: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/serviceAgents")
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  async updateServiceAgents(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ServiceAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceAgents: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/serviceAgents")
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  async disconnectServiceAgents(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ServiceAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceAgents: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,

        office: {
          select: {
            id: true,
          },
        },

        role: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
