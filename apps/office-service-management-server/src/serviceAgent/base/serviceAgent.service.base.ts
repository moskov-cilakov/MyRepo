/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServiceAgent as PrismaServiceAgent,
  Office as PrismaOffice,
} from "@prisma/client";

export class ServiceAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceAgent.count(args);
  }

  async serviceAgents(
    args: Prisma.ServiceAgentFindManyArgs
  ): Promise<PrismaServiceAgent[]> {
    return this.prisma.serviceAgent.findMany(args);
  }
  async serviceAgent(
    args: Prisma.ServiceAgentFindUniqueArgs
  ): Promise<PrismaServiceAgent | null> {
    return this.prisma.serviceAgent.findUnique(args);
  }
  async createServiceAgent(
    args: Prisma.ServiceAgentCreateArgs
  ): Promise<PrismaServiceAgent> {
    return this.prisma.serviceAgent.create(args);
  }
  async updateServiceAgent(
    args: Prisma.ServiceAgentUpdateArgs
  ): Promise<PrismaServiceAgent> {
    return this.prisma.serviceAgent.update(args);
  }
  async deleteServiceAgent(
    args: Prisma.ServiceAgentDeleteArgs
  ): Promise<PrismaServiceAgent> {
    return this.prisma.serviceAgent.delete(args);
  }

  async getOffice(parentId: string): Promise<PrismaOffice | null> {
    return this.prisma.serviceAgent
      .findUnique({
        where: { id: parentId },
      })
      .office();
  }
}
