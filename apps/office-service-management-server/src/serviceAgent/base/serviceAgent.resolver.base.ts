/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceAgent } from "./ServiceAgent";
import { ServiceAgentCountArgs } from "./ServiceAgentCountArgs";
import { ServiceAgentFindManyArgs } from "./ServiceAgentFindManyArgs";
import { ServiceAgentFindUniqueArgs } from "./ServiceAgentFindUniqueArgs";
import { CreateServiceAgentArgs } from "./CreateServiceAgentArgs";
import { UpdateServiceAgentArgs } from "./UpdateServiceAgentArgs";
import { DeleteServiceAgentArgs } from "./DeleteServiceAgentArgs";
import { Office } from "../../office/base/Office";
import { ServiceAgentService } from "../serviceAgent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceAgent)
export class ServiceAgentResolverBase {
  constructor(
    protected readonly service: ServiceAgentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "read",
    possession: "any",
  })
  async _serviceAgentsMeta(
    @graphql.Args() args: ServiceAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceAgent])
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "read",
    possession: "any",
  })
  async serviceAgents(
    @graphql.Args() args: ServiceAgentFindManyArgs
  ): Promise<ServiceAgent[]> {
    return this.service.serviceAgents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceAgent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "read",
    possession: "own",
  })
  async serviceAgent(
    @graphql.Args() args: ServiceAgentFindUniqueArgs
  ): Promise<ServiceAgent | null> {
    const result = await this.service.serviceAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceAgent)
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "create",
    possession: "any",
  })
  async createServiceAgent(
    @graphql.Args() args: CreateServiceAgentArgs
  ): Promise<ServiceAgent> {
    return await this.service.createServiceAgent({
      ...args,
      data: {
        ...args.data,

        office: args.data.office
          ? {
              connect: args.data.office,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceAgent)
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "update",
    possession: "any",
  })
  async updateServiceAgent(
    @graphql.Args() args: UpdateServiceAgentArgs
  ): Promise<ServiceAgent | null> {
    try {
      return await this.service.updateServiceAgent({
        ...args,
        data: {
          ...args.data,

          office: args.data.office
            ? {
                connect: args.data.office,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceAgent)
  @nestAccessControl.UseRoles({
    resource: "ServiceAgent",
    action: "delete",
    possession: "any",
  })
  async deleteServiceAgent(
    @graphql.Args() args: DeleteServiceAgentArgs
  ): Promise<ServiceAgent | null> {
    try {
      return await this.service.deleteServiceAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Office, {
    nullable: true,
    name: "office",
  })
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "read",
    possession: "any",
  })
  async getOffice(
    @graphql.Parent() parent: ServiceAgent
  ): Promise<Office | null> {
    const result = await this.service.getOffice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
