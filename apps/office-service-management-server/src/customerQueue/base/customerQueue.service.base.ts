/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomerQueue as PrismaCustomerQueue } from "@prisma/client";

export class CustomerQueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerQueueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerQueue.count(args);
  }

  async customerQueues(
    args: Prisma.CustomerQueueFindManyArgs
  ): Promise<PrismaCustomerQueue[]> {
    return this.prisma.customerQueue.findMany(args);
  }
  async customerQueue(
    args: Prisma.CustomerQueueFindUniqueArgs
  ): Promise<PrismaCustomerQueue | null> {
    return this.prisma.customerQueue.findUnique(args);
  }
  async createCustomerQueue(
    args: Prisma.CustomerQueueCreateArgs
  ): Promise<PrismaCustomerQueue> {
    return this.prisma.customerQueue.create(args);
  }
  async updateCustomerQueue(
    args: Prisma.CustomerQueueUpdateArgs
  ): Promise<PrismaCustomerQueue> {
    return this.prisma.customerQueue.update(args);
  }
  async deleteCustomerQueue(
    args: Prisma.CustomerQueueDeleteArgs
  ): Promise<PrismaCustomerQueue> {
    return this.prisma.customerQueue.delete(args);
  }
}
