/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerQueue } from "./CustomerQueue";
import { CustomerQueueCountArgs } from "./CustomerQueueCountArgs";
import { CustomerQueueFindManyArgs } from "./CustomerQueueFindManyArgs";
import { CustomerQueueFindUniqueArgs } from "./CustomerQueueFindUniqueArgs";
import { CreateCustomerQueueArgs } from "./CreateCustomerQueueArgs";
import { UpdateCustomerQueueArgs } from "./UpdateCustomerQueueArgs";
import { DeleteCustomerQueueArgs } from "./DeleteCustomerQueueArgs";
import { CustomerQueueService } from "../customerQueue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerQueue)
export class CustomerQueueResolverBase {
  constructor(
    protected readonly service: CustomerQueueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerQueue",
    action: "read",
    possession: "any",
  })
  async _customerQueuesMeta(
    @graphql.Args() args: CustomerQueueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerQueue])
  @nestAccessControl.UseRoles({
    resource: "CustomerQueue",
    action: "read",
    possession: "any",
  })
  async customerQueues(
    @graphql.Args() args: CustomerQueueFindManyArgs
  ): Promise<CustomerQueue[]> {
    return this.service.customerQueues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerQueue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerQueue",
    action: "read",
    possession: "own",
  })
  async customerQueue(
    @graphql.Args() args: CustomerQueueFindUniqueArgs
  ): Promise<CustomerQueue | null> {
    const result = await this.service.customerQueue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerQueue)
  @nestAccessControl.UseRoles({
    resource: "CustomerQueue",
    action: "create",
    possession: "any",
  })
  async createCustomerQueue(
    @graphql.Args() args: CreateCustomerQueueArgs
  ): Promise<CustomerQueue> {
    return await this.service.createCustomerQueue({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerQueue)
  @nestAccessControl.UseRoles({
    resource: "CustomerQueue",
    action: "update",
    possession: "any",
  })
  async updateCustomerQueue(
    @graphql.Args() args: UpdateCustomerQueueArgs
  ): Promise<CustomerQueue | null> {
    try {
      return await this.service.updateCustomerQueue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerQueue)
  @nestAccessControl.UseRoles({
    resource: "CustomerQueue",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerQueue(
    @graphql.Args() args: DeleteCustomerQueueArgs
  ): Promise<CustomerQueue | null> {
    try {
      return await this.service.deleteCustomerQueue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
